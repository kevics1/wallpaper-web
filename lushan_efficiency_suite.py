# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LushanEfficiencySuite
                                 A QGIS plugin
 Lushan Efficiency Suite
A QGIS plugin designed to accelerate geospatial workflows for field geography studies, inspired by the Lushan Mountain practicum.

Core Functionalities:

Trajectory Simplifier: Automatically refines noisy GPS tracks by snapping to OSM road networks and reducing redundant vertices.

Weighting Calculator: Integrates AHP and entropy methods for objective-subjective hybrid weighting in spatial suitability models.

Facility Accessibility Analyzer: Generates multi-criteria service coverage maps (e.g., toilets, restaurants) via automated buffering and raster scoring.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yang
        email                : liyang22@whu.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from resources import *
# Import the code for the dialog
from lushan_efficiency_suite_dialog import LushanEfficiencySuiteDialog
import os.path


class LushanEfficiencySuite:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LushanEfficiencySuite_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Lushan Efficiency Suite')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LushanEfficiencySuite', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/lushan_efficiency_suite/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'庐山实习绘图&分析插件'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Lushan Efficiency Suite'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = LushanEfficiencySuiteDialog()
            
            # Connect dialog signals to plugin methods
            self.dlg.create_frame_signal.connect(self.create_frame_layer)
            self.dlg.process_dem_signal.connect(self.process_dem_data)
            self.dlg.download_osm_signal.connect(self.download_osm_data)
            self.dlg.project_layers_signal.connect(self.project_layers_to_32650)
            self.dlg.symbolize_signal.connect(self.symbolize_layers)
            self.dlg.add_annotations_signal.connect(self.add_text_annotations)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Dialog accepted - you could add any final processing here
            pass
    
    def create_frame_layer(self):
        """Create map frame layer (EPSG:32650)."""
        try:
            from qgis.core import QgsVectorLayer, QgsProject, QgsCoordinateReferenceSystem
            from qgis.PyQt.QtWidgets import QInputDialog
            
            # Get extent from user or use current map extent
            extent = self.iface.mapCanvas().extent()
            
            # Create a new memory layer for the frame
            crs = QgsCoordinateReferenceSystem('EPSG:32650')
            layer = QgsVectorLayer('Polygon?crs=EPSG:32650', '图廓层', 'memory')
            
            if layer.isValid():
                # Add the layer to the project
                QgsProject.instance().addMapLayer(layer)
                self.iface.messageBar().pushMessage("成功", "图廓层创建成功", level=0)
            else:
                self.iface.messageBar().pushMessage("错误", "无法创建图廓层", level=2)
                
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"创建图廓层时发生错误: {str(e)}", level=2)
    
    def process_dem_data(self):
        """Process DEM data for hillshade and contours."""
        try:
            self.iface.messageBar().pushMessage("信息", "DEM处理功能开发中，请稍候...", level=1)
            # TODO: Implement DEM processing logic
            # This would include:
            # - Loading DEM data
            # - Creating hillshade
            # - Generating contour lines
            # - Applying appropriate styling
            
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"处理DEM数据时发生错误: {str(e)}", level=2)
    
    def download_osm_data(self):
        """Download OSM data automatically."""
        try:
            self.iface.messageBar().pushMessage("信息", "OSM数据下载功能开发中，请稍候...", level=1)
            # TODO: Implement OSM data download logic
            # This would include:
            # - Getting current map extent
            # - Downloading transport nodes, peaks, roads, rivers, lakes, land use
            # - Adding downloaded data as layers
            
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"下载OSM数据时发生错误: {str(e)}", level=2)
    
    def project_layers_to_32650(self):
        """Project layers to EPSG:32650 coordinate system."""
        try:
            from qgis.core import QgsProject
            
            # Get all layers in the project
            layers = QgsProject.instance().mapLayers().values()
            projected_count = 0
            
            for layer in layers:
                if layer.crs().authid() != 'EPSG:32650':
                    # TODO: Implement actual reprojection logic
                    # For now, just count layers that would be projected
                    projected_count += 1
            
            self.iface.messageBar().pushMessage("信息", f"图层投影功能开发中，发现{projected_count}个需要投影的图层", level=1)
            
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"投影图层时发生错误: {str(e)}", level=2)
    
    def symbolize_layers(self):
        """Symbolize layers according to Lushan mapping system."""
        try:
            self.iface.messageBar().pushMessage("信息", "图层符号化功能开发中，请稍候...", level=1)
            # TODO: Implement symbolization logic
            # This would include:
            # - Defining Lushan mapping symbology
            # - Applying symbols to different layer types
            # - Setting up legend and styling
            
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"符号化图层时发生错误: {str(e)}", level=2)
    
    def add_text_annotations(self):
        """Add text annotations to layers."""
        try:
            self.iface.messageBar().pushMessage("信息", "文字注记功能开发中，请稍候...", level=1)
            # TODO: Implement text annotation logic
            # This would include:
            # - Adding labels to different layer types
            # - Setting up appropriate label positioning
            # - Configuring font and style
            
        except Exception as e:
            self.iface.messageBar().pushMessage("错误", f"添加文字注记时发生错误: {str(e)}", level=2)
