# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LushanEfficiencySuite
                                 A QGIS plugin
 Lushan Efficiency Suite
A QGIS plugin designed to accelerate geospatial workflows for field geography studies, inspired by the Lushan Mountain practicum.

Core Functionalities:

Trajectory Simplifier: Automatically refines noisy GPS tracks by snapping to OSM road networks and reducing redundant vertices.

Weighting Calculator: Integrates AHP and entropy methods for objective-subjective hybrid weighting in spatial suitability models.

Facility Accessibility Analyzer: Generates multi-criteria service coverage maps (e.g., toilets, restaurants) via automated buffering and raster scoring.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yang
        email                : liyang22@whu.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import (QgsProject, QgsVectorLayer, QgsProcessingFeedback,
                       QgsProcessingContext)
from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .lushan_efficiency_suite_dialog import LushanEfficiencySuiteDialog
import os.path


class LushanEfficiencySuite:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LushanEfficiencySuite_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Lushan Efficiency Suite')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LushanEfficiencySuite', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/lushan_efficiency_suite/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'庐山实习绘图&分析插件'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Lushan Efficiency Suite'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = LushanEfficiencySuiteDialog()
            # Connect the buffer requested signal
            self.dlg.bufferRequested.connect(self.perform_buffer_analysis)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Dialog was accepted and buffer analysis would have been performed
            # in the perform_buffer_analysis method
            pass

    def perform_buffer_analysis(self, parameters):
        """Perform buffer analysis using QGIS processing tools."""
        try:
            # Show progress bar
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setVisible(True)
                self.dlg.progressBar.setValue(0)

            # Create processing context and feedback
            context = QgsProcessingContext()
            feedback = QgsProcessingFeedback()

            input_layer = parameters['input_layer']
            distance = parameters['distance']
            segments = parameters['segments']
            dissolve = parameters['dissolve']
            output_name = parameters['output_name']
            add_to_map = parameters['add_to_map']

            # Update progress
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setValue(25)

            # Prepare buffer parameters
            buffer_params = {
                'INPUT': input_layer,
                'DISTANCE': distance,
                'SEGMENTS': segments,
                'END_CAP_STYLE': 0,  # Round
                'JOIN_STYLE': 0,     # Round
                'MITER_LIMIT': 2,
                'DISSOLVE': dissolve,
                'OUTPUT': 'TEMPORARY_OUTPUT'
            }

            # Update progress
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setValue(50)

            # Run buffer algorithm
            result = processing.run("native:buffer", buffer_params, context=context, feedback=feedback)

            if not result or 'OUTPUT' not in result:
                raise Exception("Buffer processing failed - no output generated")

            # Update progress
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setValue(75)

            # Get the output layer
            buffer_layer = result['OUTPUT']

            if isinstance(buffer_layer, str):
                # If it's a path, load it as a layer
                buffer_layer = QgsVectorLayer(buffer_layer, output_name, "ogr")

            if not buffer_layer.isValid():
                raise Exception("Generated buffer layer is invalid")

            # Set layer name
            buffer_layer.setName(output_name)

            # Add to map if requested
            if add_to_map:
                QgsProject.instance().addMapLayer(buffer_layer)

                # Zoom to layer extent
                if self.iface and self.iface.mapCanvas():
                    self.iface.mapCanvas().setExtent(buffer_layer.extent())
                    self.iface.mapCanvas().refresh()

            # Update progress
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setValue(100)

            # Show success message
            feature_count = buffer_layer.featureCount()
            QMessageBox.information(
                self.dlg,
                "Buffer Analysis Complete",
                f"Buffer analysis completed successfully!\n\n"
                f"Output layer: {output_name}\n"
                f"Features created: {feature_count}\n"
                f"Buffer distance: {distance:.2f} meters\n"
                f"Added to map: {'Yes' if add_to_map else 'No'}"
            )

            # Hide progress bar
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setVisible(False)

            # Close dialog
            self.dlg.accept()

        except Exception as e:
            # Hide progress bar
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setVisible(False)

            # Show error message
            QMessageBox.critical(
                self.dlg,
                "Buffer Analysis Error",
                f"An error occurred during buffer analysis:\n\n{str(e)}"
            )

        finally:
            # Ensure progress bar is hidden
            if hasattr(self.dlg, 'progressBar'):
                self.dlg.progressBar.setVisible(False)
