# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LushanEfficiencySuiteDialog
                                 A QGIS plugin
 Lushan Efficiency Suite
A QGIS plugin designed to accelerate geospatial workflows for field geography studies, inspired by the Lushan Mountain practicum.

Core Functionalities:

Map Making Tools: Comprehensive DEM processing, hillshade generation, and contour creation tools for practical training.

DEM Processing: Automatic clipping, projection conversion, and rendering with customizable parameters.

Contour Generation: Create styled contour lines with different intervals and labeling options.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yang
        email                : liyang22@whu.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import tempfile
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QThread, pyqtSignal, QTimer
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox, QColorDialog
from qgis.PyQt.QtGui import QColor
from qgis.core import (
    QgsProject, 
    QgsVectorLayer, 
    QgsCoordinateReferenceSystem,
    QgsLayerTreeLayer,
    QgsMapLayerProxyModel,
    QgsProcessingException
)
try:
    from qgis.gui import QgsProjectionSelectionDialog, QgsMapLayerComboBox
except ImportError:
    # Fallback for environments without QGIS GUI
    QgsProjectionSelectionDialog = None
    QgsMapLayerComboBox = None

from .lushan_map_tools import LushanMapProcessor, MapExtentTool

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lushan_efficiency_suite_dialog_base.ui'))


class ProcessingThread(QThread):
    """Worker thread for processing operations"""
    
    progressChanged = pyqtSignal(int)
    messageLogged = pyqtSignal(str)
    finished = pyqtSignal(bool, str)
    
    def __init__(self, processor, dem_path, extent_layer, output_dir, parameters):
        super().__init__()
        self.processor = processor
        self.dem_path = dem_path
        self.extent_layer = extent_layer
        self.output_dir = output_dir
        self.parameters = parameters
        
        # Connect processor signals
        self.processor.progressChanged.connect(self.progressChanged.emit)
        self.processor.messageLogged.connect(self.messageLogged.emit)
        self.processor.finished.connect(self.finished.emit)
        
    def run(self):
        """Execute the processing workflow"""
        try:
            self.processor.process_complete_workflow(
                self.dem_path, 
                self.extent_layer, 
                self.output_dir,
                **self.parameters
            )
        except Exception as e:
            self.finished.emit(False, str(e))


class LushanEfficiencySuiteDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, iface=None):
        """Constructor."""
        super(LushanEfficiencySuiteDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # Store QGIS interface
        self.iface = iface
        
        # Initialize processing components
        self.processor = LushanMapProcessor()
        self.extent_tool = MapExtentTool(iface) if iface else None
        self.processing_thread = None
        
        # Current state
        self.current_extent_layer = None
        self.dem_file_path = None
        self.output_directory = None
        
        # Color variables for contours
        self.contour_100m_color = QColor("#fffac1")
        self.contour_20m_color = QColor("#fff5a5")
        
        # Connect signals and slots
        self.connect_signals()
        
        # Initialize UI state
        self.initialize_ui()
        
    def connect_signals(self):
        """Connect UI signals to their respective slots"""
        
        # Map extent buttons
        self.btn_createExtent.clicked.connect(self.create_map_extent)
        self.btn_selectExtentLayer.clicked.connect(self.select_extent_layer)
        
        # File browsers
        self.btn_browseDem.clicked.connect(self.browse_dem_file)
        self.btn_browseOutputDir.clicked.connect(self.browse_output_directory)
        
        # Projection selection
        self.btn_selectProjection.clicked.connect(self.select_projection)
        
        # Color selection buttons
        self.btn_contour100Color.clicked.connect(self.select_contour_100m_color)
        self.btn_contour20Color.clicked.connect(self.select_contour_20m_color)
        
        # Opacity sliders
        self.slider_demOpacity.valueChanged.connect(self.update_opacity_label)
        self.slider_contour100Opacity.valueChanged.connect(self.update_contour_100m_opacity_label)
        self.slider_contour20Opacity.valueChanged.connect(self.update_contour_20m_opacity_label)
        
        # Process button
        self.btn_process.clicked.connect(self.start_processing)
        
        # Enable/disable contour labels
        self.checkBox_contour100Labels.toggled.connect(self.toggle_contour_100m_labels)
        self.checkBox_contour20Labels.toggled.connect(self.toggle_contour_20m_labels)
        
    def initialize_ui(self):
        """Initialize UI with default values and states"""
        
        # Set default output directory to temp
        default_output = tempfile.gettempdir()
        self.lineEdit_outputDir.setText(default_output)
        self.output_directory = default_output
        
        # Update opacity labels
        self.update_opacity_label()
        self.update_contour_100m_opacity_label()
        self.update_contour_20m_opacity_label()
        
        # Set color button styles
        self.update_color_button_style(self.btn_contour100Color, self.contour_100m_color)
        self.update_color_button_style(self.btn_contour20Color, self.contour_20m_color)
        
        # Initialize progress
        self.progressBar.setValue(0)
        
        # Initialize log
        self.textEdit_log.clear()
        self.log_message("庐山地图制作工具已准备就绪")
        
    def create_map_extent(self):
        """Create a new map extent layer interactively"""
        try:
            if not self.extent_tool:
                self.log_message("错误: 无法访问QGIS界面工具")
                return
                
            # Get current map canvas extent as default
            geometry = self.extent_tool.start_extent_creation()
            
            if geometry:
                # Create temporary shapefile path
                temp_dir = tempfile.mkdtemp()
                extent_path = os.path.join(temp_dir, "map_extent.shp")
                
                # Create extent layer
                self.current_extent_layer = self.processor.create_map_extent_layer(
                    geometry, extent_path, self.lineEdit_projection.text()
                )
                
                # Update UI
                self.label_selectedExtent.setText(f"当前图廓层: {self.current_extent_layer.name()}")
                self.log_message("图廓层创建完成")
                
        except Exception as e:
            self.log_message(f"图廓层创建失败: {str(e)}")
            QMessageBox.warning(self, "错误", f"图廓层创建失败:\n{str(e)}")
            
    def select_extent_layer(self):
        """Select an existing layer as map extent"""
        try:
            # Get all polygon layers from the project
            layers = QgsProject.instance().mapLayers().values()
            polygon_layers = [layer for layer in layers 
                            if isinstance(layer, QgsVectorLayer) 
                            and layer.geometryType() == QgsWkbTypes.PolygonGeometry]
            
            if not polygon_layers:
                QMessageBox.information(self, "提示", "项目中没有找到面图层。请先创建或加载一个面图层。")
                return
                
            # Create selection dialog
            layer_names = [layer.name() for layer in polygon_layers]
            layer_name, ok = QtWidgets.QInputDialog.getItem(
                self, "选择图廓层", "选择用作图廓层的面图层:", layer_names, 0, False
            )
            
            if ok and layer_name:
                # Find the selected layer
                for layer in polygon_layers:
                    if layer.name() == layer_name:
                        self.current_extent_layer = layer
                        self.label_selectedExtent.setText(f"当前图廓层: {layer_name}")
                        self.log_message(f"已选择图廓层: {layer_name}")
                        break
                        
        except Exception as e:
            self.log_message(f"图廓层选择失败: {str(e)}")
            QMessageBox.warning(self, "错误", f"图廓层选择失败:\n{str(e)}")
            
    def browse_dem_file(self):
        """Browse for DEM input file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "选择DEM文件", "", 
            "Raster files (*.tif *.tiff *.img *.bil *.asc *.sdat *.rst);;All files (*.*)"
        )
        
        if file_path:
            self.lineEdit_demFile.setText(file_path)
            self.dem_file_path = file_path
            self.log_message(f"已选择DEM文件: {os.path.basename(file_path)}")
            
    def browse_output_directory(self):
        """Browse for output directory"""
        directory = QFileDialog.getExistingDirectory(self, "选择输出目录")
        
        if directory:
            self.lineEdit_outputDir.setText(directory)
            self.output_directory = directory
            self.log_message(f"已选择输出目录: {directory}")
            
    def select_projection(self):
        """Select coordinate reference system"""
        if QgsProjectionSelectionDialog:
            dialog = QgsProjectionSelectionDialog(self)
            dialog.setCrs(QgsCoordinateReferenceSystem(self.lineEdit_projection.text()))
            
            if dialog.exec():
                crs = dialog.crs()
                self.lineEdit_projection.setText(crs.authid())
                self.log_message(f"已选择投影: {crs.authid()}")
        else:
            # Fallback for environments without QGIS GUI
            self.log_message("投影选择工具不可用")
            
    def select_contour_100m_color(self):
        """Select color for 100m contours"""
        color = QColorDialog.getColor(self.contour_100m_color, self, "选择100m等值线颜色")
        if color.isValid():
            self.contour_100m_color = color
            self.update_color_button_style(self.btn_contour100Color, color)
            
    def select_contour_20m_color(self):
        """Select color for 20m contours"""
        color = QColorDialog.getColor(self.contour_20m_color, self, "选择20m等值线颜色")
        if color.isValid():
            self.contour_20m_color = color
            self.update_color_button_style(self.btn_contour20Color, color)
            
    def update_color_button_style(self, button, color):
        """Update color button appearance"""
        button.setText(color.name())
        button.setStyleSheet(f"background-color: {color.name()}; border: 1px solid #ccc; padding: 6px 12px; border-radius: 4px;")
        
    def update_opacity_label(self):
        """Update DEM opacity label"""
        value = self.slider_demOpacity.value()
        self.label_opacityValue.setText(f"{value}%")
        
    def update_contour_100m_opacity_label(self):
        """Update 100m contour opacity label"""
        value = self.slider_contour100Opacity.value()
        self.label_opacity100Value.setText(f"{value}%")
        
    def update_contour_20m_opacity_label(self):
        """Update 20m contour opacity label"""
        value = self.slider_contour20Opacity.value()
        self.label_opacity20Value.setText(f"{value}%")
        
    def toggle_contour_100m_labels(self, enabled):
        """Toggle 100m contour labels"""
        info_text = "宋体, 0.6点, 黑色, 平行模式, 线中间" if enabled else "无标注"
        self.label_contour100LabelInfo.setText(info_text)
        
    def toggle_contour_20m_labels(self, enabled):
        """Toggle 20m contour labels"""
        info_text = "宋体, 0.6点, 黑色, 平行模式, 线中间" if enabled else "无标注"
        self.label_contour20LabelInfo.setText(info_text)
        
    def log_message(self, message):
        """Add message to log"""
        self.textEdit_log.append(f"[{QTimer().remainingTime()}] {message}")
        
    def validate_inputs(self):
        """Validate all required inputs"""
        errors = []
        
        if not self.dem_file_path or not os.path.exists(self.dem_file_path):
            errors.append("请选择有效的DEM文件")
            
        if not self.current_extent_layer:
            errors.append("请创建或选择图廓层")
            
        if not self.output_directory or not os.path.exists(self.output_directory):
            errors.append("请选择有效的输出目录")
            
        if not self.lineEdit_projection.text().strip():
            errors.append("请指定目标投影")
            
        return errors
        
    def start_processing(self):
        """Start the complete processing workflow"""
        
        # Validate inputs
        errors = self.validate_inputs()
        if errors:
            QMessageBox.warning(self, "输入验证失败", "\n".join(errors))
            return
            
        # Disable processing button
        self.btn_process.setEnabled(False)
        
        # Reset progress
        self.progressBar.setValue(0)
        self.log_message("开始处理...")
        
        try:
            # Gather all parameters
            parameters = {
                'dem_opacity': self.slider_demOpacity.value(),
                'hillshade_params': {
                    'z_factor': self.doubleSpinBox_zFactor.value(),
                    'azimuth': self.spinBox_azimuth.value(),
                    'elevation': self.spinBox_elevation.value()
                },
                'contour_params': {
                    'interval_100m': True,  # Always create 100m contours
                    'interval_20m': True,   # Always create 20m contours
                    'color_100m': self.contour_100m_color.name(),
                    'width_100m': self.doubleSpinBox_contour100Width.value(),
                    'opacity_100m': self.slider_contour100Opacity.value(),
                    'labels_100m': self.checkBox_contour100Labels.isChecked(),
                    'color_20m': self.contour_20m_color.name(),
                    'width_20m': self.doubleSpinBox_contour20Width.value(),
                    'opacity_20m': self.slider_contour20Opacity.value(),
                    'labels_20m': self.checkBox_contour20Labels.isChecked()
                }
            }
            
            # Create and start processing thread
            self.processing_thread = ProcessingThread(
                self.processor,
                self.dem_file_path,
                self.current_extent_layer,
                self.output_directory,
                parameters
            )
            
            # Connect thread signals
            self.processing_thread.progressChanged.connect(self.progressBar.setValue)
            self.processing_thread.messageLogged.connect(self.log_message)
            self.processing_thread.finished.connect(self.processing_finished)
            
            # Start processing
            self.processing_thread.start()
            
        except Exception as e:
            self.log_message(f"处理启动失败: {str(e)}")
            QMessageBox.critical(self, "错误", f"处理启动失败:\n{str(e)}")
            self.btn_process.setEnabled(True)
            
    def processing_finished(self, success, message):
        """Handle processing completion"""
        self.btn_process.setEnabled(True)
        
        if success:
            self.log_message("处理成功完成！")
            QMessageBox.information(self, "完成", "地图制作处理已成功完成！")
            self.progressBar.setValue(100)
        else:
            self.log_message(f"处理失败: {message}")
            QMessageBox.critical(self, "处理失败", f"处理过程中发生错误:\n{message}")
            
        # Clean up thread
        if self.processing_thread:
            self.processing_thread.deleteLater()
            self.processing_thread = None
