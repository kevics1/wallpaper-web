# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LushanEfficiencySuiteDialog
                                 A QGIS plugin
 Lushan Efficiency Suite
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yang
        email                : liyang22@whu.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lushan_efficiency_suite_dialog_base.ui'))


class LushanEfficiencySuiteDialog(QtWidgets.QDialog, FORM_CLASS):
    
    # 定义信号
    createMapFrame = pyqtSignal()
    processDEM = pyqtSignal(str)
    downloadData = pyqtSignal()
    reprojectData = pyqtSignal()
    symbolizeData = pyqtSignal()
    labelingData = pyqtSignal()
    
    def __init__(self, parent=None):
        """Constructor."""
        super(LushanEfficiencySuiteDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        self.setupUi(self)
        
        # 初始化输出路径
        self.lineEdit_output_path.setText(os.path.expanduser("~"))
        
        # 连接信号槽
        self.connectSignals()
        
    def connectSignals(self):
        """连接信号槽"""
        # 按钮点击事件
        self.btn_create_mapframe.clicked.connect(self.on_create_mapframe)
        self.btn_browse_dem.clicked.connect(self.on_browse_dem)
        self.btn_process_dem.clicked.connect(self.on_process_dem)
        self.btn_download_data.clicked.connect(self.on_download_data)
        self.btn_reproject.clicked.connect(self.on_reproject)
        self.btn_symbolize.clicked.connect(self.on_symbolize)
        self.btn_labeling.clicked.connect(self.on_labeling)
        self.btn_browse_output.clicked.connect(self.on_browse_output)
        
    def on_create_mapframe(self):
        """创建图廓层"""
        self.createMapFrame.emit()
        
    def on_browse_dem(self):
        """浏览DEM文件"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "选择DEM文件", 
            "", 
            "栅格文件 (*.tif *.tiff *.img *.asc);;所有文件 (*)"
        )
        if file_path:
            self.lineEdit_dem_path.setText(file_path)
            
    def on_process_dem(self):
        """处理DEM"""
        dem_path = self.lineEdit_dem_path.text()
        if not dem_path:
            QMessageBox.warning(self, "警告", "请先选择DEM文件")
            return
        if not os.path.exists(dem_path):
            QMessageBox.warning(self, "警告", "DEM文件不存在")
            return
        self.processDEM.emit(dem_path)
        
    def on_download_data(self):
        """下载数据"""
        self.downloadData.emit()
        
    def on_reproject(self):
        """投影转换"""
        self.reprojectData.emit()
        
    def on_symbolize(self):
        """符号化"""
        self.symbolizeData.emit()
        
    def on_labeling(self):
        """添加注记"""
        self.labelingData.emit()
        
    def on_browse_output(self):
        """浏览输出路径"""
        folder_path = QFileDialog.getExistingDirectory(
            self, 
            "选择输出文件夹", 
            self.lineEdit_output_path.text()
        )
        if folder_path:
            self.lineEdit_output_path.setText(folder_path)
            
    def update_status(self, status_type, message):
        """统一更新状态"""
        if status_type == "mapframe":
            self.label_mapframe_status.setText(f"状态：{message}")
        elif status_type == "dem":
            self.label_dem_status.setText(f"状态：{message}")
        elif status_type == "download":
            self.label_download_status.setText(f"状态：{message}")
        elif status_type == "process":
            self.label_process_status.setText(f"状态：{message}")
        elif status_type == "error":
            QMessageBox.critical(self, "错误", message)
        
    def get_target_crs(self):
        """获取目标坐标系"""
        return self.lineEdit_target_crs.text()
        
    def get_output_path(self):
        """获取输出路径"""
        return self.lineEdit_output_path.text()